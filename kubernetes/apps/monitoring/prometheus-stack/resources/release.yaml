---
# yaml-language-server: $schema=https://crds.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 12h
  maxHistory: 3
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 67.3.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: monitoring
  install:
    crds: Skip
  upgrade:
    cleanupOnFail: true
    crds: Skip
  dependsOn:
    - name: prometheus-operator-crds
  valuesFrom:
    - kind: ConfigMap
      name: flux-kube-state-metrics-config
      valuesKey: kube-state-metrics-config.yaml
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  values:
    fullnameOverride: stack
    crds:
      enabled: false
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      # config:
      #   templates:
      #     - /etc/alertmanager/config/*.tmpl
      #     - /etc/alertmanager/configmaps/**/*.tmpl
      # ingress:
      #   enabled: true
      #   pathType: Prefix
      #   ingressClassName: nginx
      #   hosts:
      #     - alertmanager.milton.mcf.io
      #   tls:
      #     - hosts:
      #         - alertmanager.milton.mcf.io
      # podDisruptionBudget:
      #   enabled: true
      alertmanagerSpec:
        # for now we need to add the templates to the stack spec until it's
        # supported in alertmanagerConfig
        # configMaps:
        #   - slack-templates
        resources:
          requests:
            cpu: 10m
          limits:
            memory: 300M
        storage:
          volumeClaimTemplate:
            metadata:
              name: data
            spec:
              storageClassName: ceph-block
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
    kubeApiServer:
      serviceMonitor:
        selector:
          k8s-app: kube-apiserver
    kubeScheduler:
      service:
        selector:
          k8s-app: kube-scheduler
    kubeControllerManager: &kubeControllerManager
      service:
        selector:
          k8s-app: kube-controller-manager
    kubeEtcd:
      <<: *kubeControllerManager
    kubeProxy:
      enabled: false
    prometheus:
      route:
        main:
          enabled: true
          hostnames:
            - prometheus.milton.mcf.io
          parentRefs:
            - name: internal
              namespace: ingress-system
              sectionName: https
      prometheusSpec:
        scrapeInterval: 1m # Matches interval from Grafana helm chart
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - memory-snapshot-on-shutdown
        externalUrl: https://prometheus.milton.mcf.io
        logFormat: json
        retention: 14d
        retentionSize: 70GB
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 3200Mi
        storageSpec:
          volumeClaimTemplate:
            metadata:
              name: data
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 75Gi
    prometheusOperator:
      fullnameOverride: prometheus-operator
      admissionWebhooks:
        certManager:
          enabled: true
      resources:
        requests:
          cpu: 15m
          memory: 128M
        limits:
          memory: 800M
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 10m
            memory: 60M
          limits:
            cpu: 0
            memory: 80M
    grafana:
      enabled: false
      forceDeployDashboards: false
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes
      forceDeployDatasources: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
      resources:
        requests:
          cpu: 15m
          memory: 100M
        limits:
          memory: 150M
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      resources:
        requests:
          cpu: 15m
          memory: 128M
        limits:
          memory: 400M
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
