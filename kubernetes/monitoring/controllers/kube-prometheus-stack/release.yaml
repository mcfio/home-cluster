---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 12h
  maxHistory: 3
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 57.1.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: monitoring
  install:
    createNamespace: true
    crds: Create
    replace: true
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
  uninstall:
    keepHistory: false
  values:
    fullnameOverride: stack
    crds:
      enabled: true
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      enabled: false
      # config:
      #   templates:
      #     - /etc/alertmanager/config/*.tmpl
      #     - /etc/alertmanager/configmaps/**/*.tmpl
      # ingress:
      #   enabled: true
      #   pathType: Prefix
      #   ingressClassName: nginx
      #   hosts:
      #     - alertmanager.milton.mcf.io
      #   tls:
      #     - hosts:
      #         - alertmanager.milton.mcf.io
      # podDisruptionBudget:
      #   enabled: true
      # alertmanagerSpec:
      #   # for now we need to add the templates to the stack spec until it's
      #   # supported in alertmanagerConfig
      #   # configMaps:
      #   #   - slack-templates
      #   podAntiAffinity: hard
      #   replicas: 2
      #   resources:
      #     limits:
      #       memory: 300M
      #     requests:
      #       cpu: 10m
      #       memory: 60M
      #   storage:
      #     volumeClaimTemplate:
      #       metadata:
      #         name: data
      #       spec:
      #         accessModes:
      #           - ReadWriteOnce
      #         resources:
      #           requests:
      #             storage: 1Gi
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: ["__name__"]
            regex: "(aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)"
            action: keep
          - sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: ["__name__"]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)"
            action: keep
          - sourceLabels: ["node"]
            targetLabel: instance
            action: replace
    prometheus:
      prometheusSpec:
        enableAdminAPI: true
        enableFeatures:
          - auto-gomaxprocs
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        externalUrl: https://prometheus.milton.mcf.io
        externalLabels:
          cluster: mcf-k8s-cluster
        logFormat: json
        replicas: 1
        retention: 2d
        retentionSize: "15GB"
        replicaExternalLabelName: "__replica__" # must match with thanos value `.query.replicaLabel[0]`
        resources:
          requests:
            cpu: 257m
            memory: 3760M
          limits:
            memory: 3760M
        storageSpec:
          volumeClaimTemplate:
            metadata:
              name: data
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 20Gi
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
    prometheusOperator:
      fullnameOverride: prometheus-operator
      admissionWebhooks:
        certManager:
          enabled: true
      resources:
        requests:
          cpu: 15m
          memory: 128M
        limits:
          memory: 800M
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 10m
            memory: 60M
          limits:
            cpu: 0
            memory: 80M
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes
      forceDeployDatasources: true
    kube-state-metrics:
      - kind: ConfigMap
        name: flux-kube-state-metrics-config
        valuesKey: kube-state-metrics-config.yaml
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      resources:
        requests:
          cpu: 15m
          memory: 100M
        limits:
          memory: 150M
