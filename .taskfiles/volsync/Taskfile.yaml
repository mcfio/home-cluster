---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  VOLSYNC_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/volsync/resources'

env: &env-vars
  APP: '{{.APP}}'
  NAMESPACE: '{{.NAMESPACE}}'
  JOB: '{{.JOB}}'
  CLAIM: '{{.CLAIM}}'
  PREVIOUS: '{{.PREVIOUS}}'
  PUID: '{{.PUID}}'
  PGID: '{{.PGID}}'

tasks:

  state-*:
    desc: Suspend or Resume Volsync
    summary: |
      Args:
        state: resume or suspend (required)
    cmds:
      - flux --namespace {{.NAMESPACE}} {{.STATE}} helmrelease volsync
      - kubectl --namespace {{.NAMESPACE}} scale deployment volsync --replicas {{if eq "suspend" .STATE}}0{{else}}1{{end}}
    vars:
      NAMESPACE: '{{default "volsync-system" .namespace}}'
      STATE: '{{index .MATCH 0}}'

  list:
    desc: List snapshots for an application
    summary: |
      namespace: Namespace the PVC is in (default: default)
      app: Application to list snapshots for (required)
    cmds:
      - /usr/bin/env -S envsubst < <(cat {{.VOLSYNC_RESOURCES_DIR}}/list.tmpl.yaml) | kubectl apply -f -
      - defer: kubectl --namespace {{.NAMESPACE}} delete job {{.JOB}}
      - kubectl --namespace {{.NAMESPACE}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NAMESPACE}} logs job/{{.JOB}} --container main
    requires:
      vars: ["app"]
    vars:
      APP: '{{.app}}'
      NAMESPACE: '{{default "default" .namespace}}'
      JOB: 'volsync-list-{{.app}}'
    preconditions:
      - test -f $(which envsubst)
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/list.tmpl.yaml
    silent: true

  unlock:
    desc: Unlock a Restic repository for an application
    summary: |
      namespace: Namespace the PVC is in (default: default)
      app: Application to unlock (required)
    cmds:
      - envsubst < <(cat {{.VOLSYNC_RESOURCES_DIR}}/unlock.tmpl.yaml) | kubectl apply -f -
      - defer: kubectl --namespace {{.NAMESPACE}} delete job {{.JOB}}
      - kubectl --namespace {{.NAMESPACE}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NAMESPACE}} logs job/{{.JOB}} --container minio
      - kubectl --namespace {{.NAMESPACE}} logs job/{{.JOB}} --container r2
    requires:
      vars: ["app"]
    vars:
      APP: '{{.app}}'
      NAMESPACE: '{{default "default" .namespace}}'
      JOB: 'volsync-unlock-{{.app}}'
    preconditions:
      - test -f $(which envsubst)
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/unlock.tmpl.yaml
    silent: true

  restore:
    desc: Restore a snapshot to an application PVC
    summary: |
      namespace: Namespace the PVC is in (default: default)
      app: Application to list snapshots for (required)
      previous: The number of previous snapshot to restore (default 2)
    cmds:
      - { task: .suspend, vars: *env-vars }
      - { task: .resume, vars: *env-vars }
    requires:
      vars: ["app"]
    vars:
      APP: '{{.app}}'
      NAMESPACE: '{{default "default" .namespace}}'
      PREVIOUS: '{{default 2 .previous}}'
      CLAIM:
        sh: kubectl --namespace {{.NAMESPACE}} get replicationsources/{{.APP}} -o jsonpath="{.spec.sourcePVC}"
      PUID:
        sh: kubectl --namespace {{.NAMESPACE}} get replicationsources/{{.APP}} -o jsonpath="{.spec.restic.moverSecurityContext.runAsUser}"
      PGID:
        sh: kubectl --namespace {{.NAMESPACE}} get replicationsources/{{.APP}} -o jsonpath="{.spec.restic.moverSecurityContext.runAsGroup}"

  cleanup:
    desc: Clean up volume populator PVCs
    cmds:
      - for: { var: DEST }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl --namespace {{ $items._0 }} delete pvc {{ $items._1 }}
      - for: { var: CACHE }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl --namespace {{ $items._0 }} delete pvc {{ $items._1 }}
      - for: { var: SNAPSHOTS }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl --namespace {{ $items._0 }} delete volumesnapshot {{ $items._1 }}
    vars:
      DEST:
        sh: kubectl get pvc --all-namespaces --no-headers | grep "restore-once-dest" | awk '{print $1 "/" $2}'
      CACHE:
        sh: kubectl get pvc --all-namespaces --no-headers | grep "restore-once-cache" | awk '{print $1 "/" $2}'
      SNAPSHOTS:
        sh: kubectl get volumesnapshots --all-namespaces --no-headers | grep "restore-once-dest" | awk '{print $1 "/" $2}'

  # Internal task to suspend the kustomization and helm-release resources and scale the deployment to zero.
  .suspend:
    internal: true
    cmds:
      - flux --namespace flux-system suspend kustomization {{.APP}}
      - flux --namespace {{.NAMESPACE}} suspend helmrelease {{.APP}}
      # - kubectl --namespace {{.NAMESPACE}} scale deployment.apps/{{.APP}} --replicas 0
      # - kubectl --namespace {{.NAMESPACE}} wait pod --for delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=2m

  # Internal task to resume the kustomization and helm-release resources.
  .resume:
    internal: true
    cmds:
      - flux --namespace flux-system resume kustomization {{.APP}}
      - flux --namespace {{.NAMESPACE}} resume helmrelease {{.APP}}
