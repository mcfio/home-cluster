---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  # renovate: datasource=docker depName=ghcr.io/siderolabs/installer
  TALOS_VERSION: v1.7.4
  TALOS_SCHEMATIC_ID: 6adc7e7fba27948460e2231e5272e88b85159da3f3db980551976bf9898ff64b
  # TALOS_SCHEMATIC_ID: ce4c980550dd2ab1b17bbf2b08801c7eb59418eafe8f279833297925d67c7515
  TALOSCONFIG_FILE: "{{.PROJECT_DIR}}/.secrets/talosconfig"
  # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
  KUBERNETES_VERSION: v1.30.2
  KUBECONFIG_FILE: "{{.PROJECT_DIR}}/.secrets/kubeconfig"

tasks:
  generate:kubeconfig:
    desc: Generate KUBECONFIG directly from Talos API
    vars:
      NODES:
        sh: talosctl get members -o json | jq -r 'select(.spec.machineType == "controlplane") | .spec.hostname' | sort | uniq
    status:
      - test -f {{.KUBECONFIG_FILE}}
    cmds:
      - talosctl kubeconfig --nodes {{.NODES | splitLines | first}} {{.KUBECONFIG_FILE}}

  upgrade:nodes:
    desc: Upgrade all Talos Linux nodes
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    cmds:
      - flux suspend kustomization --all
      - kubectl cnpg maintenance set --reusePVC --all-namespaces
      - for: { var: NODES }
        vars: { NODE: "{{.ITEM}}" }
        task: upgrade-node
      - kubectl cnpg maintenance unset --reusePVC --all-namespaces
      - flux resume kustomization --all
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1

  upgrade-node:
    desc: Internal task to upgrade a single Talos Linux OS
    # internal: true
    requires:
      vars: [NODE]
    cmds:
      - talosctl upgrade --nodes {{.NODE}} --image factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}} --wait=true --timeout=10m --preserve=true
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.NODE}} get machineconfig >/dev/null 2>&1

  upgrade:k8s:
    desc: Upgrade a Talos Linux Kubernetes cluster
    vars:
      NODES:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    cmds:
      - talosctl upgrade-k8s --nodes {{.NODES}} --to {{.KUBERNETES_VERSION}}
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.NODE}} get machineconfig >/dev/null 2>&1

  # Maintain a clean execution
  default:
    silent: true
    cmds: [task -l]
