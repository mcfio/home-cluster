---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  apply-config:
    desc: Apply machine configuration to a single node [node=required] [mode=no-reboot]
    cmd: |-
      minijinja-cli {{.ROOT_DIR}}/talos/machineconfig.yaml.j2 | op inject | talosctl apply-config {{if .dryrun | eq "true"}}--dry-run{{end}} \
        --nodes {{.NODE}} \
        --mode {{.MODE}} \
        --file /dev/stdin
    env:
      TALOS_SCHEMATIC_ID:
        sh: |-
          talosctl get nodeannotationspec --nodes {{.NODE}} --output json | jq --exit-status --raw-output '.spec | select(.key == "extensions.talos.dev/schematic") | .value' 2>/dev/null \
            || curl --silent -X POST --data-binary @{{.ROOT_DIR}}/talos/schematic.yaml https://factory.talos.dev/schematics | jq --exit-status --raw-output '.id'
      TALOS_MACHINE_TYPE:
        sh: talosctl get machinetypes --nodes {{.NODE}} --output json | jq --exit-status --raw-output '.spec'
    vars:
      NODE: "{{.node}}"
      MODE: '{{default "no-reboot" .mode}}'
    requires:
      vars: [node]
    preconditions:
      - which jq minijinja-cli curl
      - op user get --me
      - talosctl get machineconfig --nodes {{.NODE}}
      - test -f {{.ROOT_DIR}}/talos/schematic.yaml

  upgrade-node:
    desc: Upgrade Talos on a single node [node=required] [mode=default]
    cmd: talosctl upgrade --nodes {{.NODE}} --image {{.FACTORY_IMAGE}} --reboot-mode {{.MODE}} --timeout 10m
    vars:
      NODE: "{{.node}}"
      MODE: '{{default "default" .mode}}'
      FACTORY_IMAGE:
        sh: talosctl get machineconfig persistent --nodes {{.NODE}} --output jsonpath='{.spec}' | yq --exit-status '.machine.install.image | select(. != null)'
    requires:
      vars: [node]
    preconditions:
      - which jq
      - talosctl get machineconfig --nodes {{.NODE}}

  upgrade-k8s:
    desc: Upgrade Kubernetes on all Talos Linux nodes.
    cmd: talosctl upgrade-k8s --nodes {{.NODE}} --to {{.KUBERNETES_VERSION}}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - which jq
      - talosctl get machineconfig --nodes {{.NODE}}

  kubeconfig:
    desc: Generate the kubeconfig directly from Talos API
    cmd: talosctl kubeconfig --nodes {{.NODE}} --force {{.KUBECONFIG}}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - which jq
      - talosctl config info
