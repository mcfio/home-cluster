---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars: &vars
  TALOS_VERSION:
    sh: yq '.spec.postBuild.substitute.TALOS_VERSION' {{.KUBERNETES_DIR}}/flux-system/configs/infrastructure-configs.yaml
  TALOS_SCHEMATIC_ID:
    sh: yq '.spec.postBuild.substitute.TALOS_SCHEMATIC_ID' {{.KUBERNETES_DIR}}/flux-system/configs/infrastructure-configs.yaml
  KUBERNETES_VERSION:
    sh: yq '.spec.postBuild.substitute.KUBERNETES_VERSION' {{.KUBERNETES_DIR}}/flux-system/configs/infrastructure-configs.yaml
  TALOSCONFIG_FILE: "{{.PROJECT_DIR}}/bootstrap/talos/clusterconfig/talosconfig"
  KUBECONFIG_FILE: "{{.PROJECT_DIR}}/bootstrap/talos/clusterconfig/kubeconfig"

tasks:

  bootstrap:
    desc: Bootstrap Talos Cluster
    cmds:
      - task: bootstrap:etcd
      - task: kubeconfig
      - task: bootstrap:apps

  bootstrap:etcd:
    desc: Bootstrap Etcd
    internal: true
    cmd: until talosctl --nodes {{.CONTROLPLANE}} bootstrap; do sleep 10; done
    vars:
      CONTROLPLANE:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1

  bootstrap:apps:
    desc: Bootstrap core apps needed for Talos
    internal: true
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - helmfile --quiet --file {{.ROOT_DIR}}/bootstrap/talos/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1
      - test -f {{.ROOT_DIR}}/bootstrap/talos/helmfile.yaml

  kubeconfig:
    desc: Generate KUBECONFIG directly from Talos API
    cmd: talosctl kubeconfig --nodes {{.CONTROLPLANE}} --force {{.KUBECONFIG_FILE}}
    vars:
      CONTROLPLANE:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1

  apply-config:
    desc: Apply Talos configuration to a node
    cmd: |
      sops -d {{.ROOT_DIR}}/bootstrap/talos/profiles/{{.ROLE}}.enc.yaml | envsubst | \
        talosctl machineconfig patch /dev/stdin --patch @{{.ROOT_DIR}}/bootstrap/talos/assets/{{.NODE}}.yaml | \
          talosctl apply-config --nodes {{.NODE}} --mode {{.MODE}} --file /dev/stdin
    env: *vars
    vars:
      NODE: '{{.node}}'
      MODE: '{{.mode | default "no-reboot"}}'
      ROLE:
        sh: talosctl --nodes {{.NODE}} get machineconfig -o jsonpath='{.spec.machine.type}'
    requires:
      vars: [node]
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - test -f {{.ROOT_DIR}}/bootstrap/talos/profiles/controlplane.enc.yaml
      - test -f {{.ROOT_DIR}}/bootstrap/talos/assets/{{.NODE}}.yaml
      - talosctl --nodes {{.NODE}} get machineconfig >/dev/null 2>&1

  upgrade:
    desc: Upgrade a single Talos Linux OS
    cmds:
      - talosctl upgrade --nodes {{.NODE}} --image factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}} --reboot-mode {{.MODE}} --wait=true --timeout=10m --preserve=true
    vars:
      NODE: '{{.node}}'
      MODE: '{{.mode | default "default"}}'
    requires:
      vars: [node]
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.NODE}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade a Talos Linux Kubernetes cluster
    cmds:
      - talosctl upgrade-k8s --nodes {{.NODE}} --to {{.KUBERNETES_VERSION}}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - test -f {{.TALOSCONFIG_FILE}}
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.NODE}} get machineconfig >/dev/null 2>&1
