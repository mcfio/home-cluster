---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  genconfig:
    desc: Generate KUBECONFIG from 1Password Secret
    summary: |
      Args:
        vault: 1Password vault to retrieve secret from (required)
        secret: 1Password secret holding credentials (required)
    vars:
      KUBECONFIG_FILE: "{{ .PROJECT_DIR }}/.secrets/kubeconfig"
      TEMPLATE_FILE: "{{ .PROJECT_DIR }}/kubeconfig.tpl"
      vault: "{{ .vault }}"
      secret: "{{ .secret }}"
    requires:
      vars:
        - vault
        - secret
    cmds:
      - op inject -i {{ .TEMPLATE_FILE }} -o {{ .KUBECONFIG_FILE }} --force
    preconditions:
      - sh: op
        msg: 1Password CLI is missing.
      - sh: op vault get {{ .vault }}
        msg: Vault not found.
      - sh: op item get {{ .secret }} --vault {{ .vault }}
        msg: Secret not found.

  delete-failed-pods:
    desc: Delete pods with Failed status
    summary: |
      Args:
        context: cluster context to operate against (required)
    vars:
      context: "{{ .context }}"
    requires:
      vars:
        - context
    cmds:
      - kubectl --context {{ .context }} delete pods --field-selector status.phase=Failed -A --ignore-not-found=true

  delete-succeeded-pods:
    desc: Delete pods with Succeeded status
    summary: |
      Args:
        context: cluster context to operate against (required)
    vars:
      context: "{{ .context }}"
    requires:
      vars:
        - context
    cmds:
      - kubectl --context {{ .context }} delete pods --field-selector status.phase=Succeeded -A --ignore-not-found=true

  mount:
    desc: Mount a PersistantVolumeClaim to a pod temporarily
    summary: |
      Args:
        context: Cluster 'context' to operate against (required)
        namespace: Namespace the PVC is in (default: default)
        claim: PVC to mount (required)
    interactive: true
    vars:
      context: "{{ .context }}"
      claim: "{{ .claim }}"
      namespace: '{{ .namespace | default "default" }}'
    requires:
      vars:
        - context
        - claim
    cmds:
      - |
        kubectl --context {{ .context }} run -n {{ .namespace }} debug-{{ .claim }} -i --tty --rm --image=null --privileged --overrides='
          {
            "apiVersion": "v1",
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "ghcr.io/onedr0p/alpine:rolling",
                  "command": [
                    "/bin/bash"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "volumeMounts": [
                    {
                      "name": "claim",
                      "mountPath": "/mnt/claim"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "claim",
                  "persistentVolumeClaim": {
                    "claimName": "{{ .claim }}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'
    preconditions:
      - sh: kubectl --context {{ .context }} --namespace {{ .namespace }} get pvc {{ .claim }}
        msg: PVC not found.
