---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  RESOURCE_DIR: "{{.ROOT_DIR}}/bootstrap/resources"

tasks:
  cluster:
    desc: Bootstrap Talos Cluster
    cmds:
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 10; done
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - op inject --in-file {{.RESOURCE_DIR}}/external-secrets.yaml | kubectl apply --server-side --filename -
      - op inject --in-file {{.RESOURCE_DIR}}/ingress-system.yaml | kubectl apply --server-side --filename -
      - helmfile --quiet --file {{.ROOT_DIR}}/bootstrap/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]' | shuf -n 1
    preconditions:
      - which helmfile kubectl
      - op user get --me
      - talosctl config info >/dev/null 2>&1
      - test -f {{.ROOT_DIR}}/bootstrap/helmfile.yaml

  node:
    desc: Add talos node to cluster [node=required]
    cmds:
      - minijinja-cli {{.ROOT_DIR}}/talos/{{.TYPE}}.yaml.j2 | op inject | talosctl apply-config --insecure --nodes {{.NODE}} --mode {{.MODE}} {{if .dryrun | eq "true"}}--dry-run{{end}} --file /dev/stdin
      - talosctl --nodes {{.NODE}} health --wait-timeout=10m --server=false
    env:
      TALOS_SCHEMATIC_ID: "{{default .SCHEMATIC_ID .schematic}}"
    vars:
      NODE: "{{.node}}"
      TYPE: '{{default "worker" .type}}'
      MODE: '{{default "auto" .mode}}'
      TALOS_ENDPOINT:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      SCHEMATIC_ID:
        sh: talosctl --nodes {{.TALOS_ENDPOINT}} get nodeannotationspec --output json | jq --raw-output '.spec | select(.key == "extensions.talos.dev/schematic") | .value'
    requires:
      vars: [node]
    preconditions:
      - which jq minijinja-cli
      - op user get --me
      - talosctl get links --insecure --nodes {{.NODE}}
      - test -f {{.ROOT_DIR}}/talos/{{.TYPE}}.yaml.j2
